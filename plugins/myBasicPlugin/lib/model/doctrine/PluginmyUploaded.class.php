<?php

/**
 * PluginmyUploaded
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     Rodrigo Santellan
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmyUploaded extends BasemyUploaded
{
  
  /**
    * Return the class of this object
    *
    * @return String
    * @author Rodrigo Santellan
    */
  public function getObjectClass() 
  {
      return get_class($this);
  }  
  
  
  public function getUrl($options = array())
  {
    //Tengo que preguntar de que tipo es. Dependiendo del tipo la imagen que renderizo
    
    switch ($this->getFiletype()) {
      case "mp3":
      case "MP3":
          $image_cache =  myCacheHandler::createCacheImage(sfConfig::get('sf_web_dir').DIRECTORY_SEPARATOR."myBasicPlugin".DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."mp3.png", $options);
          $cachePath = sfConfig::get('sf_cache_dir') .DIRECTORY_SEPARATOR. 'images'.DIRECTORY_SEPARATOR.'web';
          $image = str_replace($cachePath, "", $image_cache);
        break;
      default:
          //Solo imagenes.
          $image_cache =  myCacheHandler::createCacheImage(sfConfig::get('sf_upload_dir').$this->getPath().DIRECTORY_SEPARATOR.$this->getFilename(), $options);
          $cachePath = sfConfig::get('sf_cache_dir') .DIRECTORY_SEPARATOR. 'images'.DIRECTORY_SEPARATOR.'web';
          $image = str_replace($cachePath, "", $image_cache);
        break;
    }
    
    sfProjectConfiguration::getActive()->loadHelpers(array('Url'));
    $absolute_path = false;
    if(!is_null($options))
    {
      if(isset($options['absolute_path']))
      {
        $absolute_path = true;
        
      }
    }
	$url = url_for('@webImage' . '?p=' . base64_encode($image), $absolute_path);
	sfContext::getInstance()->getLogger()->info('>>>>>>> url de la imagen. >>>>>>>>>>' . $url);
    return $url;
  }
  
  public function preDelete($event) {
	//Borro la imagen fisica, esto tb borra el cache.
	$real_path = sfConfig::get('sf_upload_dir').$this->getPath().DIRECTORY_SEPARATOR;
	myFileHandler::delete($this->getFilename(), $real_path);
	parent::preDelete($event);
  }

  public function getDownloadSource()
  {
    return $this->getPath(). DIRECTORY_SEPARATOR . $this->getFilename();
  }
  
  public function getUrlPathOfBrowser()
  {
    return "/uploads".$this->getPath().DIRECTORY_SEPARATOR.$this->getFilename(); 
  }
  
  public function isSound()
  {
    if($this->getFiletype() == "mp3" || $this->getFiletype() == "MP3")
    {
      return true;
    }
    else
    {
      return false;
    }
  }
}