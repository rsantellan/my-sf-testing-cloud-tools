<?php

/**
 * PluginmyAlbumVideo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmyAlbumVideo extends BasemyAlbumVideo
{

  const YOUTUBE = "youtube";
  
  const VIMEO = "vimeo";
  
  private $_metadata = null;
  
  public function preSave($event) {
    parent::preSave($event);
    
    // Tengo que averiguar de que tipo de video estamos hablando
    $type = $this->getVideoType();
    if(is_null($type))
    {
      throw new Exception("me pusieron verdura!!");
    }
    switch ($type) {
      case self::YOUTUBE:
        $metadata = $this->getYoutubeData();
        $this->setCode($metadata->code);
        break;
      case self::VIMEO:
        $auxVimeo = new myVimeo();
        $auxVimeo->setUrl($this->getSrc());
        
        $object = $auxVimeo->getEmbedObject();
        $this->setCode($object->video_id);
        break;
      default:
        break;
    }
    
    
  }
  
  
  /**
    * Return the class of this object
    *
    * @return String
    * @author Rodrigo Santellan
    */
  public function getObjectClass() 
  {
      return get_class($this);
  }  
  
  
  public function getVideoType()
  {
    if (strpos($this->getSrc(), 'youtube') > 0) {
        return self::YOUTUBE;
    } elseif (strpos($this->getSrc(), 'vimeo') > 0) {
        return self::VIMEO;
    } else {
        return NULL;
    }
  }
  
  public function getYoutubeData()
  {
    if(is_null($this->_metadata))
      {
        //
        $url = "http://gdata.youtube.com/feeds/api/videos/".$this->retrieveYoutubeCode();
        $xml = simplexml_load_file($url);
        $children = $xml->children("http://www.w3.org/2005/Atom");
        $stdObject = new stdClass();
        $stdObject->title = (string)$children->title;
        $stdObject->published = (string)$children->published;
        $stdObject->content = (string)$children->content;
        $stdObject->author = (string)$children->author->name;
        $stdObject->code = (string) $this->retrieveYoutubeCode();
        $this->_metadata = $stdObject;
        //
      }
      return $this->_metadata;
  }
  
  public function retrieveYoutubeCode()
  {
      /*preg_match(
      '/[\\?\\&]v=([^\\?\\&]+)/',
          'http://www.youtube.com/watch?v=OzHvVoUGTOM&feature=channel',
          $matches
      );*/
      // $matches[ 1 ] should contain the youtube id
      //print_r($matches);
      preg_match(
      '/[\\?\\&]v=([^\\?\\&]+)/',
          $this->getSrc(),
          $matches
      );
      // $matches[ 1 ] should contain the youtube id
      if(!isset($matches[1]))
          throw new Exception("The youtube url is invalid", 1001);
      return $matches[1];
  }
  
}