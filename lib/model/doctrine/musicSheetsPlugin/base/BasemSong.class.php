<?php

/**
 * BasemSong
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property date $fecha_publicacion
 * @property enum $remix
 * @property integer $m_group_id
 * @property integer $m_group_original_id
 * @property integer $user_id
 * @property mGroup $mGroup
 * @property mGroup $mGroupOriginal
 * @property sfGuardUser $User
 * @property Doctrine_Collection $mSheet
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getName()                Returns the current record's "name" value
 * @method date                getFechaPublicacion()    Returns the current record's "fecha_publicacion" value
 * @method enum                getRemix()               Returns the current record's "remix" value
 * @method integer             getMGroupId()            Returns the current record's "m_group_id" value
 * @method integer             getMGroupOriginalId()    Returns the current record's "m_group_original_id" value
 * @method integer             getUserId()              Returns the current record's "user_id" value
 * @method mGroup              getMGroup()              Returns the current record's "mGroup" value
 * @method mGroup              getMGroupOriginal()      Returns the current record's "mGroupOriginal" value
 * @method sfGuardUser         getUser()                Returns the current record's "User" value
 * @method Doctrine_Collection getMSheet()              Returns the current record's "mSheet" collection
 * @method mSong               setId()                  Sets the current record's "id" value
 * @method mSong               setName()                Sets the current record's "name" value
 * @method mSong               setFechaPublicacion()    Sets the current record's "fecha_publicacion" value
 * @method mSong               setRemix()               Sets the current record's "remix" value
 * @method mSong               setMGroupId()            Sets the current record's "m_group_id" value
 * @method mSong               setMGroupOriginalId()    Sets the current record's "m_group_original_id" value
 * @method mSong               setUserId()              Sets the current record's "user_id" value
 * @method mSong               setMGroup()              Sets the current record's "mGroup" value
 * @method mSong               setMGroupOriginal()      Sets the current record's "mGroupOriginal" value
 * @method mSong               setUser()                Sets the current record's "User" value
 * @method mSong               setMSheet()              Sets the current record's "mSheet" collection
 * 
 * @package    testing
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasemSong extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('musicsong');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('fecha_publicacion', 'date', 25, array(
             'type' => 'date',
             'length' => 25,
             ));
        $this->hasColumn('remix', 'enum', 7, array(
             'type' => 'enum',
             'length' => 7,
             'values' => 
             array(
              0 => 'si',
              1 => 'no',
              2 => 'no sabe',
             ),
             'notnull' => true,
             'default' => 'no',
             ));
        $this->hasColumn('m_group_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('m_group_original_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('mGroup', array(
             'local' => 'm_group_id',
             'foreign' => 'id'));

        $this->hasOne('mGroup as mGroupOriginal', array(
             'local' => 'm_group_original_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('mSheet', array(
             'local' => 'id',
             'foreign' => 'm_song_id'));
    }
}